package br.com.tiagopedroso.livrariaonlineapi.infra.exception;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.springframework.http.HttpStatus;

import javax.servlet.http.HttpServletRequest;
import java.time.LocalDateTime;

/**
 * Defines an error model based on the IETF specification RFC 787
 * (https://datatracker.ietf.org/doc/html/rfc7807)
 *
 * @author Tiago Penha Pedroso
 */
@Getter
@Setter
@ToString
@JsonIgnoreProperties({ "cause", "localizedMessage", "message", "stackTrace", "suppressed"})
public abstract class RestErrorException extends RuntimeException {

    private static final long serialVersionUID = 6080367934703451522L;

    protected String status = "KO";

    /**
     * The HTTP status code generated by the origin server
     * for this occurrence of the problem.
     * Note: the original name is status
     */
    protected int statusCode;

    /**
     * A URI that identifies the problem type.
     * It provide human-readable documentation for the problem type.
     * When this member is not present, its value is assumed
     * to be "about:blank". Example: https://www.myapi.com/age-less-than-zero
     */
    protected String type = "about:blank";

    /**
     * A short, human-readable summary of the problem type
     */
    protected String title;

    /**
     * A human-readable explanation specific to this occurrence of the problem
     */
    protected String detail;

    /**
     * The URI of the resource that triggered the error.
     * (Extra attribute not related to RFC 787, which replaces the instance attribute)
     */
    protected String path;

    /**
     * Date and time of occurrence. (Extra attribute not related to RFC 787)
     */
    protected LocalDateTime timestamp;

    protected RestErrorException() {
    }

    private RestErrorException(int httpStatus, Object title) {
        this.statusCode = httpStatus;
        this.title = title == null ? "" : title.toString();
        this.timestamp = LocalDateTime.now();
    }

    protected RestErrorException(int httpStatus, Object title, String path) {
        this(httpStatus, title);
        this.path = path;
    }

    protected RestErrorException(int httpStatus, Object title, HttpServletRequest request) {
        this(httpStatus, title);
        this.path = request == null ? null : request.getRequestURI();

    }

    protected RestErrorException(HttpStatus httpStatus, Object title, String path) {
        this(httpStatus.value(), title, path);
    }

    protected RestErrorException(HttpStatus httpStatus, Object title, HttpServletRequest request) {
        this(httpStatus.value(), title, request);
    }

    protected RestErrorException(int httpStatus, Object title, Object detail, String path) {
        this(httpStatus, title, path);
        this.detail = validateDetail(detail);
    }

    protected RestErrorException(int httpStatus, Object title, Object detail, HttpServletRequest request) {
        this(httpStatus, title, request);
        this.detail = validateDetail(detail);
    }

    protected RestErrorException(HttpStatus httpStatus, Object title, Object detail, String path) {
        this(httpStatus, title, path);
        this.detail = validateDetail(detail);
    }

    protected RestErrorException(HttpStatus httpStatus, Object title, Object detail, HttpServletRequest request) {
        this(httpStatus, title, request);
        this.detail = validateDetail(detail);
    }

    private String validateDetail(Object detail) {
        if (detail != null) {
            if (detail instanceof RestErrorException) {
                return  ((RestErrorException) detail).getDetail();
            }else if (detail instanceof Exception) {
                return  ((Exception) detail).getMessage();
            } else {
                return detail.toString();
            }
        }

        return "";
    }

}
